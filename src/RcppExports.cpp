// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// boost_split
Rcpp::CharacterVector boost_split(std::string val_s);
RcppExport SEXP _readspss_boost_split(SEXP val_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type val_s(val_sSEXP);
    rcpp_result_gen = Rcpp::wrap(boost_split(val_s));
    return rcpp_result_gen;
END_RCPP
}
// fast_factor
SEXP fast_factor(SEXP x, SEXP y);
RcppExport SEXP _readspss_fast_factor(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fast_factor(x, y));
    return rcpp_result_gen;
END_RCPP
}
// readencrypted
Rcpp::List readencrypted(const char * filePath, const bool debug, std::string encStr, std::string const ownEnc, std::string const pass);
RcppExport SEXP _readspss_readencrypted(SEXP filePathSEXP, SEXP debugSEXP, SEXP encStrSEXP, SEXP ownEncSEXP, SEXP passSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type filePath(filePathSEXP);
    Rcpp::traits::input_parameter< const bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< std::string >::type encStr(encStrSEXP);
    Rcpp::traits::input_parameter< std::string const >::type ownEnc(ownEncSEXP);
    Rcpp::traits::input_parameter< std::string const >::type pass(passSEXP);
    rcpp_result_gen = Rcpp::wrap(readencrypted(filePath, debug, encStr, ownEnc, pass));
    return rcpp_result_gen;
END_RCPP
}
// readpor
List readpor(const char * filePath, const bool debug, std::string encStr, bool override);
RcppExport SEXP _readspss_readpor(SEXP filePathSEXP, SEXP debugSEXP, SEXP encStrSEXP, SEXP overrideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type filePath(filePathSEXP);
    Rcpp::traits::input_parameter< const bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< std::string >::type encStr(encStrSEXP);
    Rcpp::traits::input_parameter< bool >::type override(overrideSEXP);
    rcpp_result_gen = Rcpp::wrap(readpor(filePath, debug, encStr, override));
    return rcpp_result_gen;
END_RCPP
}
// readsav
List readsav(const char * filePath, const bool debug, std::string encStr, std::string const ownEnc);
RcppExport SEXP _readspss_readsav(SEXP filePathSEXP, SEXP debugSEXP, SEXP encStrSEXP, SEXP ownEncSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type filePath(filePathSEXP);
    Rcpp::traits::input_parameter< const bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< std::string >::type encStr(encStrSEXP);
    Rcpp::traits::input_parameter< std::string const >::type ownEnc(ownEncSEXP);
    rcpp_result_gen = Rcpp::wrap(readsav(filePath, debug, encStr, ownEnc));
    return rcpp_result_gen;
END_RCPP
}
// writepor
void writepor(const char * filePath, Rcpp::DataFrame dat);
RcppExport SEXP _readspss_writepor(SEXP filePathSEXP, SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type filePath(filePathSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type dat(datSEXP);
    writepor(filePath, dat);
    return R_NilValue;
END_RCPP
}
// writesav
void writesav(const char * filePath, Rcpp::DataFrame dat, uint8_t compress, bool debug, bool is_zsav);
RcppExport SEXP _readspss_writesav(SEXP filePathSEXP, SEXP datSEXP, SEXP compressSEXP, SEXP debugSEXP, SEXP is_zsavSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type filePath(filePathSEXP);
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type dat(datSEXP);
    Rcpp::traits::input_parameter< uint8_t >::type compress(compressSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    Rcpp::traits::input_parameter< bool >::type is_zsav(is_zsavSEXP);
    writesav(filePath, dat, compress, debug, is_zsav);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_readspss_boost_split", (DL_FUNC) &_readspss_boost_split, 1},
    {"_readspss_fast_factor", (DL_FUNC) &_readspss_fast_factor, 2},
    {"_readspss_readencrypted", (DL_FUNC) &_readspss_readencrypted, 5},
    {"_readspss_readpor", (DL_FUNC) &_readspss_readpor, 4},
    {"_readspss_readsav", (DL_FUNC) &_readspss_readsav, 4},
    {"_readspss_writepor", (DL_FUNC) &_readspss_writepor, 2},
    {"_readspss_writesav", (DL_FUNC) &_readspss_writesav, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_readspss(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
